C51 COMPILER V9.52.0.0   DUST                                                              11/01/2019 21:34:32 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DUST
OBJECT MODULE PLACED IN .\obj\dust.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE src\dust.c BROWSE INCDIR(.\inc;.\lib) DEBUG OBJECTEXTEND PRINT(.\list\dust.
                    -lst) TABS(2) OBJECT(.\obj\dust.obj)

line level    source

   1          
   2          /*
   3           *  dust.c
   4           *  Kit Shaw
   5           *  2019/10/01
   6           */
   7          #include "SC92F844X_C.h"
   8          #include "data_type.h"
   9          #include "dust.h"
  10          #include "stdlib.h"
  11          #include "fan.h"
  12          
  13          xdata unsigned short dust_adc_value[DUST_SIZE];
  14          xdata unsigned long dust_adc_mean;       //平均值
  15          xdata unsigned short dust_display_value;  //
  16          xdata unsigned short dust_last_display_value;
  17          xdata unsigned char dust_chang_count; //联系2次不一样再变化
  18          xdata unsigned char dust_ok_flag;            //adc转换完成标志
  19          xdata unsigned char dust_index = 0;
  20          xdata unsigned short dust_delay_count;   //PM25延时显示计数
  21          unsigned char dust_level;      //1优, 2中, 3差
  22          //unsigned char dust_size ;
  23          //AD15 P43, 第19脚
  24          void dust_init(void)
  25          { 
  26   1        P5CON |= ((1<<4)| (1<<3)); //P54, P53输出
  27   1        //ADCCFG1 |= 1<<7; //AIN15位acd输入口
  28   1        adc_init(15);
  29   1        dust_adc_mean = 0;
  30   1      }
  31          
  32          //unsigned short read_dust_adc_value(void)
  33          //{
  34          //  return dust_adc_mean;
  35          //}
  36          
  37          unsigned short read_dust_display_value(void)
  38          {
  39   1      #ifndef DEBUG_FAN_RETURN_PULSE
  40   1        return dust_last_display_value;
  41   1      #else
                return read_disp_fan_return_pulse();
              #endif
  44   1      }
  45          //最高3.7V,  最低0.625
  46          void dust_adc_mean_value(void)
  47          {
  48   1        unsigned char i;
  49   1        unsigned long sum;
  50   1        unsigned long dust_voltage;
  51   1        sum = 0;
  52   1        for(i = 0; i<DUST_SIZE; i++)
  53   1        {
  54   2          sum += (unsigned long)dust_adc_value[i];
C51 COMPILER V9.52.0.0   DUST                                                              11/01/2019 21:34:32 PAGE 2   

  55   2        }
  56   1        // y = 0.0056x + 0.6
  57   1        // 电压 = 0.0056 * PM2.5 + 0.6
  58   1        // PM.25的单位为ug/m3
  59   1        //PM2.5 = (电压 - 0.6 ) / 0.0056
  60   1        //PM2.5 = (电压- 0.6) * 1000/56;
  61   1        dust_adc_mean = sum / i;
  62   1        dust_voltage = dust_adc_mean * 10000 * 5 /4096 ;
  63   1        //if(dust_voltage > 6000) dust_voltage -= 6000;
  64   1        //if(dust_voltage > 5500) dust_voltage -= 5500;
  65   1        //if(dust_voltage > 4500) dust_voltage -= 4500;
  66   1        if(dust_voltage > 3800) dust_voltage -= 3800;
  67   1        else dust_voltage = 0;
  68   1        dust_display_value = (dust_voltage / 56);  //20是补偿值
  69   1        //dust_display_value = dust_adc_mean / 10;// * 5 * 133 / 4096;  //dust_adc_mean/4096 *5
  70   1        //dust_display_value = (unsigned short)((dust_adc_mean  * 5* 178 / 4096 - 60 * 178)  /100 );  //dust_adc_
             -mean/4096 *5
  71   1      }
  72          
  73          
  74          void dust_task(void)
  75          //1ms调用一次
  76          {
  77   1          if(1 == dust_ok_flag)
  78   1          {
  79   2            dust_ok_flag = 0;
  80   2            dust_adc_value[dust_index] = (ADCVH<<4)+(ADCVL>>4);
  81   2            if(++dust_index > DUST_SIZE)
  82   2            {
  83   3              dust_adc_mean_value();
  84   3              
  85   3              dust_index = 0;
  86   3            }
  87   2          }
  88   1          
  89   1          if(++dust_delay_count>200)
  90   1        {
  91   2          dust_delay_count = 0;
  92   2          //dust_last_display_value = dust_display_value;  //更新显示值
  93   2          if((dust_display_value + 20) < dust_last_display_value)
  94   2          {
  95   3            //if(dust_last_display_value>400);  //更新显示值)
  96   3            dust_last_display_value -= (rand()%10);  //更新显示值
  97   3          }
  98   2          else 
  99   2          {     
 100   3            if((dust_display_value - dust_last_display_value) > 10 )
 101   3            {
 102   4              dust_last_display_value = dust_display_value;  //更新显示值
 103   4            }
 104   3            else if(dust_last_display_value != dust_display_value)
 105   3            {
 106   4              if(++dust_chang_count>=3)
 107   4              {
 108   5                dust_chang_count = 0;
 109   5                dust_last_display_value = dust_display_value;  //更新显示值
 110   5                if( dust_last_display_value == 0) dust_last_display_value = (rand()%5 + 1);
 111   5              }
 112   4            }
 113   3          }
 114   2          //if(dust_last_display_value>=153) dust_last_display_value = 153;
 115   2          if(dust_last_display_value>=999) dust_last_display_value = 999;
C51 COMPILER V9.52.0.0   DUST                                                              11/01/2019 21:34:32 PAGE 3   

 116   2      //    if( dust_last_display_value == 0) dust_last_display_value = (rand()%5 + 1);
 117   2          //dust_last_display_value = 90;
 118   2          if(dust_last_display_value <= 100) dust_level = DUST_LEVEL_EXCELLENT;  //小于等于70为优
 119   2          else if((dust_last_display_value > 100) && (dust_last_display_value <= 200))dust_level = DUST_LEVEL_12; 
 120   2          else if((dust_last_display_value>200) && (dust_last_display_value <= 300)) dust_level = DUST_LEVEL_MEDIU
             -M;  //小于等于70为优
 121   2          //else if((dust_last_display_value>150) && (dust_last_display_value <= 300)) dust_level = DUST_LEVEL_23;
             -  //
 122   2          else dust_level = DUST_LEVEL_BAD;
 123   2      
 124   2          
 125   2        }
 126   1      }
 127          
 128          unsigned char read_dust_level(void)
 129          {
 130   1        return dust_level;
 131   1      }
 132          
 133          /*****************************************************
 134          *????:void ADC_Init(uint Channel)
 135          *????:ADC???
 136          *????:void
 137          *????:Channel
 138          *****************************************************/
 139          void adc_init(unsigned int channel)
 140          {
 141   1        ADCCON = 0X80|channel;    //??ADC,ADC?????2M ,??Channel?ADC???
 142   1        if(channel<8)
 143   1        {
 144   2          ADCCFG0 = 1<<channel;   //??Channel?????
 145   2        }
 146   1        else
 147   1        {
 148   2          ADCCFG1 = 1<<(channel-8);   //??Channel?????
 149   2        }
 150   1        //OP_CTM1 &= ~(1<<7); //参考电压为VDD = 5V
 151   1        
 152   1        IE = 0X40;        //??ADC??
 153   1      }
 154          
 155          void adc_start(void)
 156          //启动ADC转换
 157          {
 158   1        ADCCON |= 0X40;   //启动AD转换
 159   1      }
 160          
 161          
 162          void ADC_Interrupt(void) interrupt 6
 163          {
 164   1        ADCCON &= ~(0X20);  //清中断标准位
 165   1        ADCCON &= ~0X40;   //停止AD转换
 166   1        dust_ok_flag = 1;
 167   1      }
 168          
 169          
 170          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    651    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.52.0.0   DUST                                                              11/01/2019 21:34:32 PAGE 4   

   XDATA SIZE       =     53    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
