C51 COMPILER V9.52.0.0   DUST                                                              10/07/2019 22:43:34 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DUST
OBJECT MODULE PLACED IN .\obj\dust.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE src\dust.c BROWSE INCDIR(.\inc;.\lib) DEBUG OBJECTEXTEND PRINT(.\list\dust.
                    -lst) TABS(2) OBJECT(.\obj\dust.obj)

line level    source

   1          
   2          /*
   3           *  dust.c
   4           *  Kit Shaw
   5           *  2019/10/01
   6           */
   7          #include "SC92F844X_C.h"
   8          #include "data_type.h"
   9          #include "dust.h"
  10          #include "stdlib.h"
  11          #include "fan.h"
  12          
  13          xdata unsigned short dust_adc_value[DUST_SIZE];
  14          xdata unsigned long dust_adc_mean;       //平均值
  15          xdata unsigned short dust_display_value;  //
  16          xdata unsigned short dust_last_display_value;
  17          xdata unsigned char dust_ok_flag;            //adc转换完成标志
  18          xdata unsigned char dust_index = 0;
  19          xdata unsigned short dust_delay_count;   //PM25延时显示计数
  20          unsigned char dust_level;      //1优, 2中, 3差
  21          //unsigned char dust_size ;
  22          //AD15 P43, 第19脚
  23          void dust_init(void)
  24          { 
  25   1        P5CON |= ((1<<4)| (1<<3)); //P54, P53输出
  26   1        //ADCCFG1 |= 1<<7; //AIN15位acd输入口
  27   1        adc_init(15);
  28   1        dust_adc_mean = 0;
  29   1      }
  30          
  31          //unsigned short read_dust_adc_value(void)
  32          //{
  33          //  return dust_adc_mean;
  34          //}
  35          
  36          unsigned short read_dust_display_value(void)
  37          {
  38   1      #ifndef DEBUG_FAN_RETURN_PULSE
  39   1        return dust_last_display_value;
  40   1      #else
                return read_disp_fan_return_pulse();
              #endif
  43   1      }
  44          //最高3.7V,  最低0.625
  45          void dust_adc_mean_value(void)
  46          {
  47   1        unsigned char i;
  48   1        unsigned long sum;
  49   1        unsigned long dust_voltage;
  50   1        sum = 0;
  51   1        for(i = 0; i<DUST_SIZE; i++)
  52   1        {
  53   2          sum += (unsigned long)dust_adc_value[i];
  54   2        }
C51 COMPILER V9.52.0.0   DUST                                                              10/07/2019 22:43:34 PAGE 2   

  55   1        // y = 0.0056x + 0.6
  56   1        // 电压 = 0.0056 * PM2.5 + 0.6
  57   1        // PM.25的单位为ug/m3
  58   1        //PM2.5 = (电压 - 0.6 ) / 0.0056
  59   1        //PM2.5 = (电压- 0.6) * 1000/56;
  60   1        dust_adc_mean = sum / i;
  61   1        dust_voltage = dust_adc_mean * 10000 * 5 /4096 ;
  62   1        //if(dust_voltage > 6000) dust_voltage -= 6000;
  63   1        if(dust_voltage > 5500) dust_voltage -= 5500;
  64   1        else dust_voltage = 0;
  65   1        dust_display_value = dust_voltage / 56;
  66   1        //dust_display_value = dust_adc_mean / 10;// * 5 * 133 / 4096;  //dust_adc_mean/4096 *5
  67   1        //dust_display_value = (unsigned short)((dust_adc_mean  * 5* 178 / 4096 - 60 * 178)  /100 );  //dust_adc_
             -mean/4096 *5
  68   1      }
  69          
  70          
  71          void dust_task(void)
  72          //1ms调用一次
  73          {
  74   1          if(1 == dust_ok_flag)
  75   1          {
  76   2            dust_ok_flag = 0;
  77   2            dust_adc_value[dust_index] = (ADCVH<<4)+(ADCVL>>4);
  78   2            if(++dust_index > DUST_SIZE)
  79   2            {
  80   3              dust_adc_mean_value();
  81   3              
  82   3              dust_index = 0;
  83   3            }
  84   2          }
  85   1          
  86   1          if(++dust_delay_count>1000)
  87   1        {
  88   2          dust_delay_count = 0;
  89   2          //dust_last_display_value = dust_display_value;  //更新显示值
  90   2          if((dust_display_value + 20) < dust_last_display_value)
  91   2          {
  92   3            dust_last_display_value -= (rand()%20);  //更新显示值
  93   3          }
  94   2          else 
  95   2          {
  96   3            dust_last_display_value = dust_display_value;  //更新显示值
  97   3          }
  98   2          //if(dust_last_display_value>=210) dust_last_display_value = 210;
  99   2          if(dust_last_display_value>=999) dust_last_display_value = 999;
 100   2          if( dust_last_display_value == 0) dust_last_display_value = (rand()%5 + 1);
 101   2          //dust_last_display_value = 90;
 102   2          if(dust_last_display_value <= 70) dust_level = DUST_LEVEL_EXCELLENT;  //小于等于70为优
 103   2          else if((dust_last_display_value > 70) && (dust_last_display_value <= 100))dust_level = DUST_LEVEL_12; 
 104   2          else if((dust_last_display_value>100) && (dust_last_display_value <= 150)) dust_level = DUST_LEVEL_MEDIU
             -M;  //小于等于70为优
 105   2          else if((dust_last_display_value>150) && (dust_last_display_value <= 200)) dust_level = DUST_LEVEL_23;  
             -//
 106   2          else dust_level = DUST_LEVEL_BAD;
 107   2      
 108   2          
 109   2        }
 110   1      }
 111          
 112          unsigned char read_dust_level(void)
 113          {
C51 COMPILER V9.52.0.0   DUST                                                              10/07/2019 22:43:34 PAGE 3   

 114   1        return dust_level;
 115   1      }
 116          
 117          /*****************************************************
 118          *????:void ADC_Init(uint Channel)
 119          *????:ADC???
 120          *????:void
 121          *????:Channel
 122          *****************************************************/
 123          void adc_init(unsigned int channel)
 124          {
 125   1        ADCCON = 0X80|channel;    //??ADC,ADC?????2M ,??Channel?ADC???
 126   1        if(channel<8)
 127   1        {
 128   2          ADCCFG0 = 1<<channel;   //??Channel?????
 129   2        }
 130   1        else
 131   1        {
 132   2          ADCCFG1 = 1<<(channel-8);   //??Channel?????
 133   2        }
 134   1        //OP_CTM1 &= ~(1<<7); //参考电压为VDD = 5V
 135   1        
 136   1        IE = 0X40;        //??ADC??
 137   1      }
 138          
 139          void adc_start(void)
 140          //启动ADC转换
 141          {
 142   1        ADCCON |= 0X40;   //启动AD转换
 143   1      }
 144          
 145          
 146          void ADC_Interrupt(void) interrupt 6
 147          {
 148   1        ADCCON &= ~(0X20);  //清中断标准位
 149   1        ADCCON &= ~0X40;   //停止AD转换
 150   1        dust_ok_flag = 1;
 151   1      }
 152          
 153          
 154          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    620    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     52    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
