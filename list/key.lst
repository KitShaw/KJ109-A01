C51 COMPILER V9.52.0.0   KEY                                                               10/07/2019 23:19:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\obj\key.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE src\key.c BROWSE INCDIR(.\inc;.\lib) DEBUG OBJECTEXTEND PRINT(.\list\key.ls
                    -t) TABS(2) OBJECT(.\obj\key.obj)

line level    source

   1          
   2          
   3          /*
   4           * key.c
   5           */
   6          
   7          #include <key.h>
   8          #include "inc\SC92F844x_C.h"
   9          #include "data_type.h"
  10          #include "lib\SensorMethod.h"
  11          #include "fan.h"
  12          #include "led.h"
  13          #include "eeprom.h"
  14          #include "filter.h"
  15          #include "ion.h"
  16          #include "arom.h"
  17          #include "timing_off.h"
  18          #include "beep.h"
  19          
  20          
  21          bitval key_flag;
  22          
  23          #define KEY_POWER_FLAG  key_flag.bit0
  24          #define KEY_AROM_FLAG key_flag.bit1   
  25          #define KEY_SPEED_FLAG  key_flag.bit2
  26          #define KEY_LOCK_FLAG key_flag.bit3
  27          #define LOCK_FLAG   key_flag.bit6            //童锁解锁标志, 0解锁, 1锁住
  28          #define KEY_ION_FLAG key_flag.bit4
  29          #define KEY_TIMER_FLAG key_flag.bit5
  30          
  31          unsigned short key_power_count;
  32          unsigned short key_speed_count;
  33          unsigned short key_lock_count;
  34          unsigned short key_ion_count;
  35          unsigned short key_timer_count;
  36          unsigned short key_arom_count;
  37          
  38          unsigned short xdata key_no_move_count;      //按键没要按下计数, 如果一分钟没有动作,童锁就锁住
  39          
  40          
  41          INT32U exKeyValueFlag = 0;    //当前轮按键标志
  42          
  43          
  44          /**************************************************
  45          *函数名称：void  Sys_Scan(void) 
  46          *函数功能：扫描TK和显示
  47          *入口参数：void
  48          *出口参数：void  
  49          **************************************************/
  50          void Sys_Scan(void)
  51          {             
  52   1        if(SOCAPI_TouchKeyStatus&0x80)      //重要步骤2:  触摸键扫描一轮标志，是否调用TouchKeyScan()一定要根据此标
             -志位置起后
  53   1         {                                      
C51 COMPILER V9.52.0.0   KEY                                                               10/07/2019 23:19:30 PAGE 2   

  54   2          SOCAPI_TouchKeyStatus &= 0x7f;  //重要步骤3: 清除标志位， 需要外部清除。                              
  55   2          exKeyValueFlag = TouchKeyScan();//按键数据处理函数    
  56   2          if((exKeyValueFlag & 0x0000031e0) != 0)reset_key_no_move_count(); //有键按下就复位按键计数值
  57   2          TouchKeyRestart();        //启动下一轮转换                                                                  
  58   2        }          
  59   1      }
  60          
  61          void key_init(void)
  62          {
  63   1        LOCK_FLAG = 0;  
  64   1        reset_key_no_move_count();
  65   1      }
  66          
  67          void reset_key_no_move_count(void)
  68          {
  69   1        key_no_move_count = 0;
  70   1      }
  71          
  72          //0x0100--power
  73          //0x2000--香薰
  74          //0x1000--ion
  75          //0x0080--模式
  76          //0x0040--童锁
  77          //0x0020--timer
  78          //0x31e0
  79          
  80          void key_task(void)       
  81          //按键任务, 1ms调用一次
  82          { 
  83   1        if(key_no_move_count >= 60000)
  84   1        {
  85   2          LOCK_FLAG = 1; 
  86   2        }
  87   1        else
  88   1        {
  89   2          //reset_key_no_move_count();
  90   2          key_no_move_count++;
  91   2        }
  92   1      
  93   1        if(((exKeyValueFlag & 0x0000031e0) == 0x000000100) && (0 == LOCK_FLAG))//电源键  //灵敏度不够
  94   1        {
  95   2          if(0 == KEY_POWER_FLAG)
  96   2          {     
  97   3            if(++key_power_count >= 10)
  98   3            {
  99   4              KEY_POWER_FLAG = 1;
 100   4              key_power_com();        
 101   4            }
 102   3          }
 103   2        }
 104   1        else 
 105   1        {
 106   2          KEY_POWER_FLAG = 0;
 107   2          key_power_count = 0;
 108   2        }
 109   1        
 110   1        
 111   1        
 112   1        if(read_power_status() == POWER_OFF_STATUS)return; //关机状态直接返回
 113   1        
 114   1        if(((exKeyValueFlag & 0x0000031e0) == 0x000000080) && (0 == LOCK_FLAG))//风速键 
 115   1        {
C51 COMPILER V9.52.0.0   KEY                                                               10/07/2019 23:19:30 PAGE 3   

 116   2          if(0 == KEY_SPEED_FLAG)
 117   2          {
 118   3            if(++key_speed_count >= 5000)
 119   3            {
 120   4              KEY_SPEED_FLAG = 1;
 121   4              key_speed_long_com();
 122   4            }
 123   3          }
 124   2        }
 125   1        else 
 126   1        {
 127   2          if((key_speed_count>5) && (key_speed_count< 5000))
 128   2          {
 129   3            key_speed_com();
 130   3          }
 131   2          KEY_SPEED_FLAG = 0;
 132   2          key_speed_count = 0;
 133   2        }
 134   1        
 135   1        if(((exKeyValueFlag & 0x0000031e0) == 0x000001000) && (0 == LOCK_FLAG))//ion
 136   1        {
 137   2          if(0 == KEY_ION_FLAG)
 138   2          {
 139   3            if(++key_ion_count >= 10)
 140   3            {
 141   4              KEY_ION_FLAG = 1;
 142   4              key_ion_com();        
 143   4            }
 144   3          }
 145   2        }
 146   1        else 
 147   1        {
 148   2          KEY_ION_FLAG = 0;
 149   2          key_ion_count = 0;
 150   2        }
 151   1        
 152   1        if(((exKeyValueFlag & 0x0000031e0) == 0x000002000) && (0 == LOCK_FLAG))//arom
 153   1        {
 154   2          if(0 == KEY_AROM_FLAG)
 155   2          {
 156   3            if(++key_arom_count >= 10)
 157   3            {
 158   4              KEY_AROM_FLAG = 1;
 159   4              key_arom_com();       
 160   4            }
 161   3          }
 162   2        }
 163   1        else 
 164   1        {
 165   2          KEY_AROM_FLAG = 0;
 166   2          key_arom_count = 0;
 167   2        }
 168   1          
 169   1        if((exKeyValueFlag & 0x0000031e0) == 0x000000040)//
 170   1        {
 171   2          if(0 == KEY_LOCK_FLAG)
 172   2          {
 173   3            if(++key_lock_count >= 5000)
 174   3            {
 175   4              KEY_LOCK_FLAG = 1;
 176   4              //set_beep_count(10);
 177   4              key_lock_com();       
C51 COMPILER V9.52.0.0   KEY                                                               10/07/2019 23:19:30 PAGE 4   

 178   4            }
 179   3          }
 180   2        }
 181   1        else 
 182   1        {
 183   2          KEY_LOCK_FLAG = 0;
 184   2          key_lock_count = 0;
 185   2        }
 186   1        if(((exKeyValueFlag & 0x0000031e0) == 0x000000020) && (0 == LOCK_FLAG))//
 187   1        {
 188   2          if(0 == KEY_TIMER_FLAG)
 189   2          {
 190   3            if(++key_timer_count >= 10)
 191   3            {
 192   4              KEY_TIMER_FLAG = 1;
 193   4              key_timer_com();        
 194   4            }
 195   3          }
 196   2        }
 197   1        else 
 198   1        {
 199   2          KEY_TIMER_FLAG = 0;
 200   2          key_timer_count = 0;
 201   2        }
 202   1      }
 203          
 204          void key_ion_com(void)
 205          {
 206   1        ION_PIN = !ION_PIN;
 207   1        set_beep_count(10);
 208   1      }
 209          
 210          void reset_lock_flag(void)
 211          {
 212   1        LOCK_FLAG = 0;
 213   1        reset_key_no_move_count();
 214   1        set_beep_count(10);
 215   1      }
 216          
 217          void key_timer_com(void)
 218          {
 219   1        regulate_timing_off_level();
 220   1        set_beep_count(10);
 221   1      }
 222          
 223          void key_arom_com(void)
 224          {
 225   1        regulate_arom_level();
 226   1        set_beep_count(10);
 227   1      }
 228          
 229          void key_lock_com(void)
 230          {
 231   1        //P52 = ~P52;
 232   1        //UNLOCk_FLAG = ~UNLOCk_FLAG;
 233   1        //LOCK_FLAG = ~LOCK_FLAG;      //解
 234   1        reset_lock_flag();  
 235   1        
 236   1      }
 237          
 238          bit read_unlock_flag(void)
 239          {
C51 COMPILER V9.52.0.0   KEY                                                               10/07/2019 23:19:30 PAGE 5   

 240   1        return LOCK_FLAG;
 241   1      }
 242          
 243          void key_speed_com(void)
 244          {
 245   1        regulate_fan_speed();
 246   1        set_beep_count(10);
 247   1        
 248   1      }
 249          
 250          void key_speed_long_com(void)
 251          //长按风速键清楚滤网寿命
 252          {
 253   1        reset_filter_time();
 254   1        set_beep_count(10);
 255   1      }
 256          
 257          //void key_sleep_com(void)
 258          //{ 
 259          //  P50 = ~P50;
 260          //  if(read_fan_speed() != 0) 
 261          //  {
 262          /////   set_fan_speed(0);
 263          //    //set_night_light_level(0);
 264          //    //led_key_sleep();
 265          //  }
 266          //  else 
 267          //  {
 268          ////    set_fan_speed(1);
 269          //    //led_key_speed();
 270          //  }
 271          //  
 272          //}
 273          
 274          
 275          
 276          void key_power_com(void)
 277          {
 278   1        //unsigned long filter_time_temp;
 279   1        //P50 = ~P50;
 280   1        set_beep_count(10);
 281   1        if(POWER_ON_STATUS == read_power_status())
 282   1        {
 283   2          power_off();
 284   2          //if((read_filter_time()) & 0x000000ff == 0) led_power_on();
 285   2          
 286   2          //filter_time_temp = read_filter_time();
 287   2          //WDTCON  = 0x10;
 288   2          //IAPWrite(0x0f,(unsigned char)(filter_time_temp & 0x000000ff),IapEPPROM); 
 289   2          //IAPWrite(0x0f,0x20,IapEPPROM); 
 290   2          //IAPWrite(0x0f,31,IapEPPROM); 
 291   2          write_filter_time();
 292   2        }
 293   1        else
 294   1        {
 295   2          power_on();
 296   2        }
 297   1      }
 298          
 299          


C51 COMPILER V9.52.0.0   KEY                                                               10/07/2019 23:19:30 PAGE 6   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    611    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
