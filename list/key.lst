C51 COMPILER V9.52.0.0   KEY                                                               09/30/2019 22:24:00 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\obj\key.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE src\key.c BROWSE INCDIR(.\inc;.\lib) DEBUG OBJECTEXTEND PRINT(.\list\key.ls
                    -t) TABS(2) OBJECT(.\obj\key.obj)

line level    source

   1          
   2          
   3          /*
   4           * key.c
   5           */
   6          
   7          #include <key.h>
   8          #include "inc\SC92F837X_C.h"
   9          #include "data_type.h"
  10          #include "lib\SensorMethod.h"
  11          #include "fan.h"
  12          #include "led.h"
  13          #include "eeprom.h"
  14          #include "filter.h"
  15          //#include "IAP.h"
  16          
  17          
  18          bitval key_flag;
  19          
  20          #define KEY_POWER_FLAG  key_flag.bit0
  21          #define KEY_SPEED_FLAG  key_flag.bit1
  22          #define KEY_SLEEP_FLAG  key_flag.bit2
  23          #define KEY_NIGHT_LIGHT_FLAG  key_flag.bit3
  24          unsigned char key_power_count;
  25          unsigned short key_speed_count;
  26          unsigned char key_sleep_count;
  27          unsigned char key_night_light_count;
  28          
  29          INT32U exKeyValueFlag = 0;    //当前轮按键标志
  30          
  31          
  32          /**************************************************
  33          *函数名称：void  Sys_Scan(void) 
  34          *函数功能：扫描TK和显示
  35          *入口参数：void
  36          *出口参数：void  
  37          **************************************************/
  38          void Sys_Scan(void)
  39          {             
  40   1        if(SOCAPI_TouchKeyStatus&0x80)      //重要步骤2:  触摸键扫描一轮标志，是否调用TouchKeyScan()一定要根据此标
             -志位置起后
  41   1         {                                      
  42   2          SOCAPI_TouchKeyStatus &= 0x7f;  //重要步骤3: 清除标志位， 需要外部清除。                              
  43   2          exKeyValueFlag = TouchKeyScan();//按键数据处理函数    电源键是0x0800, 风速键是0x0400, 睡眠键是0x0200
  44   2          TouchKeyRestart();        //启动下一轮转换                                                                  
  45   2        }          
  46   1      }
  47          
  48          
  49          void key_task(void)       
  50          //按键任务, 1ms调用一次
  51          { 
  52   1        
  53   1        if(read_over_voltage_flag() == 1) return;  //电压超过按键不处理直接返回
C51 COMPILER V9.52.0.0   KEY                                                               09/30/2019 22:24:00 PAGE 2   

  54   1        if((exKeyValueFlag & 0x000000f00) == 0x000000800)//电压键  //灵敏度不够
  55   1        {
  56   2          if(0 == KEY_POWER_FLAG)
  57   2          {
  58   3            if(++key_power_count >= 50)
  59   3            {
  60   4              KEY_POWER_FLAG = 1;
  61   4              key_power_com();
  62   4            }
  63   3          }
  64   2        }
  65   1        else 
  66   1        {
  67   2          KEY_POWER_FLAG = 0;
  68   2          key_power_count = 0;
  69   2        }
  70   1        
  71   1        if((exKeyValueFlag & 0x000000f00) == 0x000000100)//夜灯键 
  72   1        {
  73   2          if(0 == KEY_NIGHT_LIGHT_FLAG)
  74   2          {
  75   3            if(++key_night_light_count >= 50)
  76   3            {
  77   4              KEY_NIGHT_LIGHT_FLAG = 1;
  78   4              key_night_light_com();
  79   4            }
  80   3          }
  81   2        }
  82   1        else 
  83   1        {
  84   2          KEY_NIGHT_LIGHT_FLAG = 0;
  85   2          key_night_light_count = 0;
  86   2        }
  87   1        
  88   1        if(read_power_status() == POWER_OFF_STATUS)return; //关机状态直接返回
  89   1        
  90   1        if((exKeyValueFlag & 0x000000f00) == 0x000000400)//风速键 
  91   1        {
  92   2          if(0 == KEY_SPEED_FLAG)
  93   2          {
  94   3            if(++key_speed_count >= 5000)
  95   3            {
  96   4              KEY_SPEED_FLAG = 1;
  97   4              key_speed_long_com();
  98   4            }
  99   3          }
 100   2        }
 101   1        else 
 102   1        {
 103   2          if((key_speed_count>50) && (key_speed_count< 5000))
 104   2          {
 105   3            key_speed_com();
 106   3          }
 107   2          KEY_SPEED_FLAG = 0;
 108   2          key_speed_count = 0;
 109   2        }
 110   1        
 111   1        if((exKeyValueFlag & 0x000000f00) == 0x000000200)//睡眠键 
 112   1        {
 113   2          if(0 == KEY_SLEEP_FLAG)
 114   2          {
 115   3            if(++key_sleep_count >= 50)
C51 COMPILER V9.52.0.0   KEY                                                               09/30/2019 22:24:00 PAGE 3   

 116   3            {
 117   4              KEY_SLEEP_FLAG = 1;
 118   4              key_sleep_com();
 119   4            }
 120   3          }
 121   2        }
 122   1        else 
 123   1        {
 124   2          KEY_SLEEP_FLAG = 0;
 125   2          key_sleep_count = 0;
 126   2        }
 127   1          
 128   1      }
 129          
 130          void key_night_light_com(void)
 131          {
 132   1        night_light_level_handle();
 133   1        led_key_night_light();
 134   1      }
 135          
 136          
 137          void key_speed_com(void)
 138          {
 139   1        if(2 == read_fan_speed())set_fan_speed(1);
 140   1        else set_fan_speed(2);
 141   1        //if(flash_write_byte(10, 10) == 1)
 142   1        led_key_speed();
 143   1      }
 144          
 145          void key_speed_long_com(void)
 146          //长按风速键清楚滤网寿命
 147          {
 148   1        reset_filter_time();
 149   1      }
 150          
 151          void key_sleep_com(void)
 152          { 
 153   1        if(read_fan_speed() != 0) 
 154   1        {
 155   2          set_fan_speed(0);
 156   2          set_night_light_level(0);
 157   2          led_key_sleep();
 158   2        }
 159   1        else 
 160   1        {
 161   2          set_fan_speed(1);
 162   2          led_key_speed();
 163   2        }
 164   1        
 165   1      }
 166          
 167          
 168          
 169          void key_power_com(void)
 170          {
 171   1        //unsigned long filter_time_temp;
 172   1        if(POWER_ON_STATUS == read_power_status())
 173   1        {
 174   2          power_off();
 175   2          //if((read_filter_time()) & 0x000000ff == 0) led_power_on();
 176   2          
 177   2          //filter_time_temp = read_filter_time();
C51 COMPILER V9.52.0.0   KEY                                                               09/30/2019 22:24:00 PAGE 4   

 178   2          //WDTCON  = 0x10;
 179   2          //IAPWrite(0x0f,(unsigned char)(filter_time_temp & 0x000000ff),IapEPPROM); 
 180   2          //IAPWrite(0x0f,0x20,IapEPPROM); 
 181   2          //IAPWrite(0x0f,31,IapEPPROM); 
 182   2          write_filter_time();
 183   2        }
 184   1        else
 185   1        {
 186   2          power_on();
 187   2        }
 188   1      }
 189          
 190          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    343    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
