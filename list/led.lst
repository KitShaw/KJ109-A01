C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\obj\led.obj
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE src\led.c BROWSE INCDIR(.\inc;.\lib) DEBUG OBJECTEXTEND PRINT(.\list\led.ls
                    -t) TABS(2) OBJECT(.\obj\led.obj)

line level    source

   1          
   2          /*
   3           *  led.c
   4           *  Kit Shaw
   5           *  2019/10/01
   6           */
   7           
   8          
   9          #include "led.h"
  10          #include "SC92F844X_C.h"
  11          #include "data_type.h"
  12          #include "fan.h"
  13          #include "ion.h"
  14          #include "key.h"
  15          #include "dust.h"
  16          #include "arom.h"
  17          #include "timing_off.h"
  18          #include "intrins.h"
  19          
  20          unsigned char xdata LEDRAM[30] _at_ 0x700;
  21          
  22          unsigned int test_count;
  23          unsigned char leddata[]={ 
  24          
  25                          0x70,//0xc0,//0x3F,  //"0"  D7 =童锁右 (d6 d6)定时图标 
  26                          0x7f,//0xf9,//0x06,  //"1"  wifi图标(D7 D6) 自动(d5 d4) 睡眠(d3 d2) 童锁左(d1)
  27                          0x7f,//0xa4,//0x5B,  //"2"  40%右(D7) 60%(D6 D5) 80%(D4 D3) 100%(D2 D1)
  28                          0x7f,//0xb0,//0x4F,  //"3"  voc监测(D7 D6) 滤网寿命(D5 D4) 20%(D3 D2) 40%左(D1)
  29                          0x7f,//0x99, //0x66,  //"4" oC D7 湿度(D6) %(D5) 差(D4) 中(D3) 良(D2) 优(D1)
  30                          0x7f,//0x6D,  //"5"   // 定时(D7) PM2.5(D6) 风速(D5) 温度(D4) 小时(D3) ug/m3(D2) 分钟(D1)
  31                          0x73,//0x7D,  //"6"//湿度个位
  32                          0x7b,//0x07,  //"7" //湿度十位
  33                          0xb0,//0x7F,  //"8" //温度个位    //第8位VOC内圈红色LED
  34                          0xf9,//0x6F,  //"9" //温度十位    //第8位VOC内圈绿色LED
  35                          0x79,//0x77,  //"A" //pm25个位   //第8位VOC内圈蓝色LED
  36                          0xed,//0x7C,  //"B" //pm2.5十位  //第8位VOC外圈的蓝色led
  37                          0xb0,//0x39,  //"C" //pm2.5百位  //第8位VOC外圈的白色led背景
  38                          0xff,//0x5E,  //"D"
  39                          0xff,//0x79,  //"E"
  40                          0xff,//0x71,  //"F"
  41                          0xff,//0x76,  //"H"
  42                          0xff,//0x38,  //"L"
  43                          0xff,//0x37,  //"n"
  44                          0xff,//0x3E,  //"u"
  45                          0xff,//0x73,  //"P"
  46                          0xff,//0x5C,  //"o"
  47                          0xff,//0x40,  //"-"
  48                          0xff,//0x00,  //??
  49                              };
  50          
  51          
  52          void led_init(void)
  53          { 
  54   1        P5CON |= ((1<<0) | (1<<1)| (1<<2)); //
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 2   

  55   1        //P5 &= ~((1<<0) | (1<<1)| (1<<2)); 
  56   1      
  57   1        P2CON |= 0x7f; //P2 out.
  58   1        LED_RED = 1;
  59   1        LED_GREEN = 1;
  60   1        LED_BLUE = 0;
  61   1      
  62   1        P3CON |= (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7); //P33, 34,35,35,37 out.
  63   1      
  64   1        P4CON |= (1<<0) | (1<<1) | (1<<6) | (1<<7);
  65   1        P0CON |= (1<<1) | (1<<5) | (1<<6);// | (1<<6) | (1<<7);
  66   1        P1CON |= (1<<6) | (1<<7);
  67   1      
  68   1        i2c_init();
  69   1        led_off();
  70   1        
  71   1      }
  72          
  73          void led_task(void)
  74          //100ms调用一次
  75          {
  76   1          if(read_power_status() == POWER_OFF_STATUS)
  77   1          {     
  78   2            return;
  79   2          }
  80   1          led_display_ion();
  81   1          led_display_arom_level();
  82   1          led_display_mode();
  83   1          led_display_lock();
  84   1        led_display_pm25();
  85   1        led_display_dust_level();
  86   1        led_display_timing_off_level();
  87   1        
  88   1      }
  89          
  90          
  91          void led_display_filter_out(unsigned char filter_flag)
  92          {
  93   1        if( 1 == filter_flag) 
  94   1        {
  95   2        //LEDRAM[21] |= 0x10;  //滤网, 电源按键
  96   2          LED_FILTER = LED_ON;
  97   2        }
  98   1        else
  99   1        {
 100   2          //  LEDRAM[21] &= ~0x10;  //滤网, 电源按键
 101   2          LED_FILTER = LED_OFF;
 102   2        }
 103   1      }
 104          
 105          void led_off(void)
 106          {
 107   1        //DDRCON &= ~0x80;
 108   1        LED_GREEN = 1;
 109   1        LED_BLUE = 1;
 110   1        LED_RED = 1;
 111   1        LED_PM2_5 = 1;
 112   1        LED_TIMER_1H = 1;
 113   1        LED_TIMER_2H = 1; 
 114   1        LED_TIMER_4H = 1;
 115   1        LED_TIMER_8H = 1;
 116   1        LED_KEY_TIMER = 1;
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 3   

 117   1        LED_FILTER = 1;
 118   1        LED_ION = 1;
 119   1        LED_KEY_ION  = 1;
 120   1        LED_KEY_AROM  = 1;
 121   1        LED_AROM_LOW = 1;
 122   1        LED_AROM_MIDDLE = 1;
 123   1        LED_AROM_HIGH  = 1;
 124   1        LED_SPEED_LOW = 1;
 125   1        LED_SPEED_MIDDLE = 1;
 126   1        LED_SPEED_HIGH = 1;
 127   1        LED_SPEED_AUTO = 1;
 128   1        LED_KEY_MODE = 1;
 129   1        LED_LOCK = 1;
 130   1        LED_KEY_LOCK = 1;
 131   1        LED_KEY_POWER = 1;
 132   1        /*
 133   1        LEDRAM[11] &= ~0x08;  // 童锁图标
 134   1        LEDRAM[12] &= ~0x18;  //0x10 -P2.5  0x08-8H
 135   1        LEDRAM[13] &= ~0x18;  //0x10 - 高, 0x08 - 4H
 136   1        LEDRAM[14] &= ~0x18;  //0x10 - 中, 0x08 - 2H  
 137   1        //0x80 - 数码管百位的小数点,  0x40 十位, 0x20 个位
 138   1        LEDRAM[15] &= ~0xf8;  //0x10 - 低, 0x08 - 1H
 139   1        //数码管g段
 140   1        LEDRAM[16] &= ~0xf0;  //0x10 - ION图标, 0x08香薰按键,   
 141   1        //数码管F段
 142   1        LEDRAM[17] &= ~0xf0;   //0x10- 高速 和 0x08-负离子按键
 143   1        //数码管E段
 144   1        LEDRAM[18] &= ~0xf0;   //0x10- 中速 , 0x08 - 模式按键
 145   1        //数码管D段
 146   1        LEDRAM[19] &= ~0xf0;  //低速 ,  童锁按键
 147   1        //数码管C段
 148   1        LEDRAM[20] &= ~0xf0;  //智能, 定时按键
 149   1        //数码管B段
 150   1        LEDRAM[21] &= ~0xf0;  //滤网, 电源按键
 151   1        //数码管A段
 152   1        */
 153   1      }
 154          
 155          void led_all_on(void)
 156          {
 157   1        //DDRCON &= ~0x80;
 158   1        LED_GREEN = 0;
 159   1        LED_BLUE = 0;
 160   1        LED_RED = 0;
 161   1      
 162   1        LED_PM2_5 = 0;
 163   1        LED_TIMER_1H = 0;
 164   1        LED_TIMER_2H = 0; 
 165   1        LED_TIMER_4H = 0;
 166   1        LED_KEY_TIMER = 0;
 167   1        LED_FILTER = 0;
 168   1        LED_ION = 0;
 169   1        LED_KEY_ION  = 0;
 170   1        LED_KEY_AROM  = 0;
 171   1        LED_AROM_LOW = 0;
 172   1        LED_AROM_MIDDLE = 0;
 173   1        LED_AROM_HIGH  = 0;
 174   1        LED_SPEED_LOW = 0;
 175   1        LED_SPEED_MIDDLE = 0;
 176   1        LED_SPEED_HIGH = 0;
 177   1        LED_SPEED_AUTO = 0;
 178   1        LED_KEY_MODE = 0;
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 4   

 179   1        LED_LOCK = 0;
 180   1        LED_KEY_LOCK = 0;
 181   1        LED_KEY_POWER = 0;
 182   1      
 183   1      
 184   1        /*
 185   1        LEDRAM[11] |= 0x08;  // 童锁图标
 186   1        LEDRAM[12] |= 0x18;  //0x10 -P2.5  0x08-8H
 187   1        LEDRAM[13] |= 0x18;  //0x10 - 高, 0x08 - 4H
 188   1        LEDRAM[14] |= 0x18;  //0x10 - 中, 0x08 - 2H  
 189   1        //0x80 - 数码管百位的小数点,  0x40 十位, 0x20 个位
 190   1        LEDRAM[15] |= 0xf8;  //0x10 - 低, 0x08 - 1H
 191   1        //数码管g段
 192   1        LEDRAM[16] |= 0xf8;;  //0x10 - ION图标, 0x08香薰按键,   
 193   1        //数码管F段
 194   1        LEDRAM[17] |= 0xf8;;   //0x10- 高速 和 0x08-负离子按键
 195   1        //数码管E段
 196   1        LEDRAM[18] |= 0xf8;;   //0x10- 中速 , 0x08 - 模式按键
 197   1        //数码管D段
 198   1        LEDRAM[19] |= 0xf8;;  //低速 ,  童锁按键
 199   1        //数码管C段
 200   1        LEDRAM[20] |= 0xf8;;  //智能, 定时按键
 201   1        //数码管B段
 202   1        LEDRAM[21] |= 0xf8;;  //滤网, 电源按键
 203   1        //数码管A段
 204   1        */
 205   1      }
 206          
 207          
 208          void led_on(void)
 209          {
 210   1        //DDRCON |= 0x80;
 211   1      }
 212          
 213          
 214          void led_display_pm25(void)
 215          {
 216   1        unsigned short tmp_dust_display_value;
 217   1        tmp_dust_display_value = read_dust_display_value();
 218   1        //led_display_bcd(tmp_dust_display_value / 100, HUNDRED_DIGIT);
 219   1        //led_display_bcd(tmp_dust_display_value % 100 / 10, TEN_DIGIT);
 220   1        //led_display_bcd(tmp_dust_display_value % 10, SINGLE_DIGIT);
 221   1        LED_PM2_5 = LED_ON; //PM2.5图标
 222   1      }
 223          
 224          void led_display_timing_off_level(void)
 225          {
 226   1        switch(read_timing_off_level())
 227   1        {
 228   2          //case 0:  //关闭
 229   2          //  LEDRAM[13] &= ~0x10;  //0x10 - 高, 0x08 - 4H
 230   2          //  LEDRAM[14] &= ~0x10;  //0x10 - 中, 0x08 - 2H  
 231   2            //0x80 - 数码管百位的小数点,  0x40 十位, 0x20 个位
 232   2          //  LEDRAM[15] &= ~0x10;  //0x10 - 低, 0x08 - 1H
 233   2          //break;
 234   2          case 1:  // 1H
 235   2            //LEDRAM[12] &= ~0x08;  //0x10 -P2.5  0x08-8H
 236   2            //LEDRAM[13] &= ~0x08;  //0x10 - 高, 0x08 - 4H
 237   2            //LEDRAM[14] &= ~0x08;  //0x10 - 中, 0x08 - 2H  
 238   2            //LEDRAM[15] |= 0x08;  //0x10 - 低, 0x08 - 1H
 239   2            LED_TIMER_1H = LED_ON;
 240   2            LED_TIMER_2H = LED_OFF;
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 5   

 241   2            LED_TIMER_4H = LED_OFF;
 242   2            LED_TIMER_8H = LED_OFF;
 243   2          break;
 244   2          case 2:  // 2H
 245   2            LED_TIMER_1H = LED_OFF;
 246   2            LED_TIMER_2H = LED_ON;
 247   2            LED_TIMER_4H = LED_OFF;
 248   2            LED_TIMER_8H = LED_OFF;
 249   2          break;
 250   2          case 3:  // 4H
 251   2            LED_TIMER_1H = LED_OFF;
 252   2            LED_TIMER_2H = LED_OFF;
 253   2            LED_TIMER_4H = LED_ON;
 254   2            LED_TIMER_8H = LED_OFF;
 255   2          break;
 256   2          case 4:  // 8H
 257   2            LED_TIMER_1H = LED_OFF;
 258   2            LED_TIMER_2H = LED_OFF;
 259   2            LED_TIMER_4H = LED_OFF;
 260   2            LED_TIMER_8H = LED_ON;
 261   2          break;
 262   2          default:
 263   2            LED_TIMER_1H = LED_OFF;
 264   2            LED_TIMER_2H = LED_OFF;
 265   2            LED_TIMER_4H = LED_OFF;
 266   2            LED_TIMER_8H = LED_OFF;
 267   2          break;
 268   2        }
 269   1      }
 270          
 271          void led_display_arom_level(void)
 272          {
 273   1        switch(read_arom_level())
 274   1        {
 275   2          case 1:  //低
 276   2            LED_AROM_LOW= LED_ON;
 277   2            LED_AROM_MIDDLE= LED_OFF;
 278   2            LED_AROM_HIGH= LED_OFF;     
 279   2          break;
 280   2          case 2:  //中
 281   2            LED_AROM_LOW= LED_OFF;
 282   2            LED_AROM_MIDDLE= LED_ON;
 283   2            LED_AROM_HIGH= LED_OFF; 
 284   2          break;
 285   2          case 3:  //高
 286   2            LED_AROM_LOW= LED_OFF;
 287   2            LED_AROM_MIDDLE= LED_OFF;
 288   2            LED_AROM_HIGH= LED_ON;  
 289   2          break;
 290   2          default:
 291   2            LED_AROM_LOW= LED_OFF;
 292   2            LED_AROM_MIDDLE= LED_OFF;
 293   2            LED_AROM_HIGH= LED_OFF; 
 294   2          break;
 295   2        }
 296   1      }
 297          
 298          void led_display_dust_level(void)
 299          {
 300   1        switch(read_dust_level())
 301   1        {
 302   2          case DUST_LEVEL_EXCELLENT:
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 6   

 303   2            LED_GREEN = 0;
 304   2            LED_BLUE = 1;
 305   2            LED_RED = 1;
 306   2          break;
 307   2          case DUST_LEVEL_12:
 308   2            LED_GREEN = 0;
 309   2            LED_BLUE = 0;
 310   2            LED_RED = 1;
 311   2          break;
 312   2          case DUST_LEVEL_MEDIUM:
 313   2            LED_GREEN = 0;
 314   2            LED_BLUE = 1;
 315   2            LED_RED = 0;
 316   2          break;
 317   2          /*
 318   2          case DUST_LEVEL_23:
 319   2            LED_GREEN = 1;
 320   2            LED_BLUE = 1;
 321   2            LED_RED = 0;
 322   2          break;
 323   2          */
 324   2          case DUST_LEVEL_BAD:
 325   2            LED_GREEN = 1;
 326   2            LED_BLUE = 1;
 327   2            LED_RED = 0;
 328   2          break;
 329   2          default:
 330   2            LED_GREEN = 0;
 331   2            LED_BLUE = 1;
 332   2            LED_RED = 1;
 333   2          break;
 334   2        }
 335   1      }
 336          
 337          void led_display_lock(void)
 338          {
 339   1        if( 0 == read_lock_flag())
 340   1        {
 341   2          LED_LOCK = LED_OFF;
 342   2        }
 343   1        else
 344   1        {
 345   2          LED_LOCK = LED_ON;
 346   2        }
 347   1      }
 348          
 349          void led_display_ion(void)
 350          {
 351   1        if(0 == ION_PIN)
 352   1        {
 353   2          //LEDRAM[16] |= 0x10;  //0x10 - ION图标, 0x08香薰按键, 
 354   2          LED_ION = LED_ON;
 355   2        }
 356   1        else
 357   1        {
 358   2          LED_ION = LED_OFF;
 359   2          //LEDRAM[16] &= ~0x10;  //0x10 - ION图标, 0x08香薰按键, 
 360   2        }
 361   1      }
 362          
 363          void led_display_mode(void)
 364            //智能, 酒店, 中速, 超强
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 7   

 365          {
 366   1        switch(read_fan_speed())
 367   1        {
 368   2          case FAN_SPEED_AUTO:
 369   2            LED_SPEED_AUTO = LED_ON;
 370   2            LED_SPEED_LOW = LED_OFF;
 371   2            LED_SPEED_MIDDLE= LED_OFF;
 372   2            LED_SPEED_HIGH= LED_OFF;
 373   2          break;
 374   2          case FAN_SPEED_SLEEP:
 375   2            LED_SPEED_AUTO = LED_OFF;
 376   2            LED_SPEED_LOW = LED_ON;
 377   2            LED_SPEED_MIDDLE= LED_OFF;
 378   2            LED_SPEED_HIGH= LED_OFF;
 379   2          break;
 380   2          case FAN_SPEED_MIDDLE:
 381   2            LED_SPEED_AUTO = LED_OFF;
 382   2            LED_SPEED_LOW = LED_OFF;
 383   2            LED_SPEED_MIDDLE= LED_ON;
 384   2            LED_SPEED_HIGH= LED_OFF;
 385   2          break;
 386   2          case FAN_SPEED_HIGH:
 387   2            LED_SPEED_AUTO = LED_OFF;
 388   2            LED_SPEED_LOW = LED_OFF;
 389   2            LED_SPEED_MIDDLE= LED_OFF;
 390   2            LED_SPEED_HIGH= LED_ON;
 391   2          break;
 392   2          default:
 393   2            LED_SPEED_AUTO = LED_OFF;
 394   2            LED_SPEED_LOW = LED_OFF;
 395   2            LED_SPEED_MIDDLE= LED_OFF;
 396   2            LED_SPEED_HIGH= LED_OFF;
 397   2          break;
 398   2        }
 399   1      }
 400          
 401          void led_display_bcd(unsigned char bcd_value, unsigned char digit)
 402          //digit, 第7位是百位, 6位是10位, 5位是个位
 403          {
 404   1        switch(bcd_value)
 405   1        {
 406   2          case 0:
 407   2            LEDRAM[15] &= (~(1<<digit));
 408   2            //数码管g段
 409   2            LEDRAM[16] |= (1<<digit);  //  
 410   2            //数码管F段
 411   2            LEDRAM[17] |= (1<<digit);   //
 412   2            //数码管E段
 413   2            LEDRAM[18] |= (1<<digit);   //
 414   2            //数码管D段
 415   2            LEDRAM[19] |= (1<<digit);  //
 416   2            //数码管C段
 417   2            LEDRAM[20] |= (1<<digit);  //
 418   2            //数码管B段
 419   2            LEDRAM[21] |= (1<<digit);  //
 420   2            //数码管A段
 421   2          break;
 422   2          case 1:
 423   2            LEDRAM[15] &= (~(1<<digit));
 424   2            //数码管g段
 425   2            LEDRAM[16] &= (~(1<<digit));  //  
 426   2            //数码管F段
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 8   

 427   2            LEDRAM[17] &= (~(1<<digit));  //
 428   2            //数码管E段
 429   2            LEDRAM[18] &= (~(1<<digit));  //
 430   2            //数码管D段
 431   2            LEDRAM[19] |= (1<<digit);  //
 432   2            //数码管C段
 433   2            LEDRAM[20] |= (1<<digit);  //
 434   2            //数码管B段
 435   2            LEDRAM[21] &= (~(1<<digit));  //
 436   2            //数码管A段
 437   2          break;
 438   2          case 2:
 439   2            LEDRAM[15] |= (1<<digit);
 440   2            //数码管g段
 441   2            LEDRAM[16] &= (~(1<<digit));  //  
 442   2            //数码管F段
 443   2            LEDRAM[17] |= (1<<digit);   //
 444   2            //数码管E段
 445   2            LEDRAM[18] |= (1<<digit);   //
 446   2            //数码管D段
 447   2            LEDRAM[19] &= ~(1<<digit);  //
 448   2            //数码管C段
 449   2            LEDRAM[20] |= (1<<digit);  //
 450   2            //数码管B段
 451   2            LEDRAM[21] |= (1<<digit);  //
 452   2            //数码管A段
 453   2          break;
 454   2          case 3:
 455   2            LEDRAM[15] |= (1<<digit);
 456   2            //数码管g段
 457   2            LEDRAM[16] &= (~(1<<digit)) ; //  
 458   2            //数码管F段
 459   2            LEDRAM[17] &= ~(1<<digit);   //
 460   2            //数码管E段
 461   2            LEDRAM[18] |= (1<<digit);   //
 462   2            //数码管D段
 463   2            LEDRAM[19] |= (1<<digit);  //
 464   2            //数码管C段
 465   2            LEDRAM[20] |= (1<<digit);  //
 466   2            //数码管B段
 467   2            LEDRAM[21] |= (1<<digit);  //
 468   2            //数码管A段
 469   2          break;
 470   2          case 4:
 471   2            LEDRAM[15] |= (1<<digit);
 472   2            //数码管g段
 473   2            LEDRAM[16] |= (1<<digit);  //  
 474   2            //数码管F段
 475   2            LEDRAM[17] &= ~(1<<digit);   //
 476   2            //数码管E段
 477   2            LEDRAM[18] &= ~(1<<digit);   //
 478   2            //数码管D段
 479   2            LEDRAM[19] |= (1<<digit);  //
 480   2            //数码管C段
 481   2            LEDRAM[20] |= (1<<digit);  //
 482   2            //数码管B段
 483   2            LEDRAM[21] &= ~(1<<digit);  //
 484   2            //数码管A段
 485   2          break;
 486   2          case 5:
 487   2            LEDRAM[15] |= (1<<digit);
 488   2            //数码管g段
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 9   

 489   2            LEDRAM[16] |= (1<<digit);  //  
 490   2            //数码管F段
 491   2            LEDRAM[17] &= ~(1<<digit);   //
 492   2            //数码管E段
 493   2            LEDRAM[18] |= (1<<digit);   //
 494   2            //数码管D段
 495   2            LEDRAM[19] |= (1<<digit);  //
 496   2            //数码管C段
 497   2            LEDRAM[20] &= ~(1<<digit);  //
 498   2            //数码管B段
 499   2            LEDRAM[21] |= (1<<digit);  //
 500   2            //数码管A段
 501   2          break;
 502   2          case 6:
 503   2            LEDRAM[15] |= (1<<digit);
 504   2            //数码管g段
 505   2            LEDRAM[16] |= (1<<digit);  //  
 506   2            //数码管F段
 507   2            LEDRAM[17] |= (1<<digit);   //
 508   2            //数码管E段
 509   2            LEDRAM[18] |= (1<<digit);   //
 510   2            //数码管D段
 511   2            LEDRAM[19] |= (1<<digit);  //
 512   2            //数码管C段
 513   2            LEDRAM[20] &= ~(1<<digit);  //
 514   2            //数码管B段
 515   2            LEDRAM[21] |= (1<<digit);  //
 516   2            //数码管A段
 517   2          break;
 518   2          case 7:
 519   2            LEDRAM[15] &= ~(1<<digit);
 520   2            //数码管g段
 521   2            LEDRAM[16] &= ~(1<<digit);  //  
 522   2            //数码管F段
 523   2            LEDRAM[17] &= ~(1<<digit);   //
 524   2            //数码管E段
 525   2            LEDRAM[18] &= ~(1<<digit);   //
 526   2            //数码管D段
 527   2            LEDRAM[19] |= (1<<digit);  //
 528   2            //数码管C段
 529   2            LEDRAM[20] |= (1<<digit);  //
 530   2            //数码管B段
 531   2            LEDRAM[21] |= (1<<digit);  //
 532   2            //数码管A段
 533   2          break;
 534   2          case 8:
 535   2            LEDRAM[15] |= (1<<digit);
 536   2            //数码管g段
 537   2            LEDRAM[16] |= (1<<digit);  //  
 538   2            //数码管F段
 539   2            LEDRAM[17] |= (1<<digit);   //
 540   2            //数码管E段
 541   2            LEDRAM[18] |= (1<<digit);   //
 542   2            //数码管D段
 543   2            LEDRAM[19] |= (1<<digit);  //
 544   2            //数码管C段
 545   2            LEDRAM[20] |= (1<<digit);  //
 546   2            //数码管B段
 547   2            LEDRAM[21] |= (1<<digit);  //
 548   2            //数码管A段
 549   2          break;
 550   2          case 9:
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 10  

 551   2            LEDRAM[15] |= (1<<digit);
 552   2            //数码管g段
 553   2            LEDRAM[16] |= (1<<digit);  //  
 554   2            //数码管F段
 555   2            LEDRAM[17] &= ~(1<<digit);   //
 556   2            //数码管E段
 557   2            LEDRAM[18] |= (1<<digit);   //
 558   2            //数码管D段
 559   2            LEDRAM[19] |= (1<<digit);  //
 560   2            //数码管C段
 561   2            LEDRAM[20] |= (1<<digit);  //
 562   2            //数码管B段
 563   2            LEDRAM[21] |= (1<<digit);  //
 564   2            //数码管A段
 565   2          break;
 566   2          default:
 567   2          break;        
 568   2        }
 569   1      }
 570          
 571          
 572          void i2c_init(void)
 573          {
 574   1        P0CON |= (1<<0);  //P00输出
 575   1        P2CON |= (1<<7);  //P27输出
 576   1        
 577   1        i2c_clk_low();
 578   1        i2c_din_high();
 579   1          
 580   1        test_i2c();
 581   1      }
 582          
 583          void sda_mode(unsigned char mode)
 584            // 1输出, 0输入
 585          {
 586   1        if(IO_MODE_IN == mode)
 587   1        {
 588   2          P2CON &= ~(1<<7);  //P27输入
 589   2        }
 590   1        else
 591   1        {
 592   2          P2CON |= (1<<7);  //P27输出
 593   2        }
 594   1      }
 595          
 596          
 597          void test_i2c(void)
 598          {
 599   1        unsigned short i;
 600   1        unsigned char addr;
 601   1        //delay_ms(1000);
 602   1        for(i = 0; i< 10000; i++)WDTCON  = 0x10;
 603   1        i2c_start();
 604   1        //i2c_write_byte(0x80);  //写数据命令
 605   1        i2c_write_byte(0x48);  //写数据命令
 606   1        //i2c_stop();
 607   1        i2c_waik_ack();
 608   1        
 609   1        //for(i = 0; i<60; i++) WDTCON = 0x10;
 610   1        //i2c_start();
 611   1        
 612   1        i2c_write_byte(0x05);  //7段显示, 开显示
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 11  

 613   1        i2c_waik_ack();
 614   1        i2c_stop();
 615   1        
 616   1        for(i = 0; i<60; i++) WDTCON = 0x10;
 617   1        i2c_start();
 618   1        addr = 0x68;
 619   1        i2c_write_byte(addr);  //设置地址命令00
 620   1        i2c_waik_ack();
 621   1        //i2c_write_byte(0xff);  //设置数据为0
 622   1        
 623   1        //for(i = 0; i<4; i++)
 624   1        //{
 625   1          
 626   1        //  i2c_write_byte(0x0f);  //写数据命令
 627   1        //}
 628   1        i2c_write_byte(0x0f);  //写数据命令
 629   1        i2c_waik_ack();
 630   1        i2c_stop();
 631   1      
 632   1        for(i = 0; i<60; i++) WDTCON = 0x10;
 633   1        i2c_start();
 634   1        addr = 0x6A;
 635   1        i2c_write_byte(addr);  //设置地址命令00
 636   1        i2c_waik_ack();
 637   1        //i2c_write_byte(0xff);  //设置数据为0
 638   1        
 639   1        //for(i = 0; i<4; i++)
 640   1        //{
 641   1          
 642   1        //  i2c_write_byte(0x0f);  //写数据命令
 643   1        //}
 644   1        i2c_write_byte(0xaa);  //写数据命令
 645   1        i2c_waik_ack();
 646   1        i2c_stop();
 647   1        
 648   1      }
 649          
 650          void delay_us(unsigned char val)
 651          {
 652   1        unsigned char i;
 653   1        for(i = 0; i < val; i++)
 654   1        {
 655   2          //_nop_();
 656   2          _nop_();
 657   2        }
 658   1      }
 659          
 660          
 661          void  i2c_waik_ack(void)
 662          {
 663   1         uchar EEPROM_err_count;
 664   1         
 665   1         //SDA_MODEL = 1; 
 666   1         delay_us(5);
 667   1         I2C_CLK = 1;    
 668   1         //I2C_DIN = 1;      
 669   1         delay_us(5); 
 670   1         I2C_CLK = 0;
 671   1         sda_mode(IO_MODE_IN);
 672   1         while( 1 == I2C_DIN)
 673   1         {
 674   2            EEPROM_err_count++;
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 12  

 675   2            if(EEPROM_err_count>=240)
 676   2            {
 677   3               EEPROM_err_count=0;
 678   3               //EEPROM_err_flag=1;
 679   3               ION_PIN = ~ION_PIN;
 680   3           sda_mode(IO_MODE_OUT);
 681   3               break;
 682   3            }
 683   2         }     
 684   1         //SDA_MODEL = 0;  
 685   1         sda_mode(IO_MODE_OUT);
 686   1         //SCL = 0; 
 687   1         I2C_CLK = 0;
 688   1         //Delay1us();
 689   1         delay_us(5); 
 690   1         //I2C_DIN = 0;
 691   1         //SDA = 0; 
 692   1         
 693   1      }
 694          
 695          
 696          void i2c_write_byte(unsigned char val)
 697            //写一个字节
 698          {
 699   1          unsigned char val_count;
 700   1          unsigned char write_data;
 701   1          write_data = val;
 702   1          delay_us(5);
 703   1          
 704   1          //i2c_din_low();
 705   1          i2c_clk_low();
 706   1          for(val_count = 0; val_count < 8; val_count++)
 707   1          {
 708   2            if((write_data & 0x80) > 0)
 709   2            {
 710   3              
 711   3              i2c_din_high();
 712   3              delay_us(5);
 713   3              i2c_clk_high();
 714   3              delay_us(5);
 715   3              i2c_clk_low();
 716   3              //i2c_din_low();
 717   3            }
 718   2            else
 719   2            {
 720   3              //i2c_clk_low();
 721   3              //i2c_delay();
 722   3              i2c_din_low();
 723   3              i2c_clk_high();
 724   3              delay_us(5);
 725   3              i2c_clk_low();
 726   3              //i2c_din_low();
 727   3            }
 728   2            write_data <<= 1;
 729   2          }
 730   1          //i2c_stop();
 731   1          delay_us(5);
 732   1          
 733   1      }
 734          
 735          void i2c_start(void)
 736          {
C51 COMPILER V9.52.0.0   LED                                                               10/19/2019 21:52:45 PAGE 13  

 737   1        i2c_din_high();
 738   1        //delay_5us(1);
 739   1        i2c_clk_high();
 740   1        delay_us(5);
 741   1        i2c_din_low();
 742   1        delay_us(5);
 743   1        i2c_clk_low();
 744   1        delay_us(5);
 745   1      }
 746          
 747          void i2c_stop(void)
 748          {
 749   1        i2c_din_low();
 750   1        //delay_5us(1);
 751   1        i2c_clk_high();
 752   1        delay_us(5);
 753   1        i2c_din_high();
 754   1        delay_us(5);
 755   1        i2c_clk_low();
 756   1        delay_us(5);
 757   1      }
 758          
 759          
 760          void i2c_clk_high(void)
 761          {
 762   1        //GPIO_SetBits(GPIOB, GPIO_Pin_5);   //将LED端口拉高，熄灭所有LED  clk
 763   1        I2C_CLK = 1;
 764   1      }
 765          
 766          void i2c_clk_low(void)
 767          {
 768   1        //GPIO_ResetBits(GPIOB, GPIO_Pin_5);   //将LED端口拉高，熄灭所有LED  clk
 769   1        I2C_CLK = 0;
 770   1      }
 771          
 772          void i2c_din_high(void)
 773          {
 774   1        //GPIO_SetBits(GPIOB, GPIO_Pin_4);   //将LED端口拉高，熄灭所有LED  clk
 775   1        I2C_DIN = 1;
 776   1      }
 777          
 778          void i2c_din_low(void)
 779          {
 780   1        //GPIO_ResetBits(GPIOB, GPIO_Pin_4);   //将LED端口拉高，熄灭所有LED  clk
 781   1        I2C_DIN = 0;
 782   1      }
 783          
 784          
 785          
 786          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1370    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
